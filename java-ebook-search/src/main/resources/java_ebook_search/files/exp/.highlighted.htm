<!DOCTYPE html PUBLIC "-//ORA//DTD CD HTML 3.2//EN">
<html>
 <head> 
  <title>[Chapter 1] 1.3 Java Compared</title> 
  <meta name="author" content="Pat Niemeyer and Josh Peck"> 
  <meta name="date" content="Tue Jul 22 18:47:17 1997"> 
  <meta name="form" content="html"> 
  <meta name="metadata" content="dublincore.0.1"> 
  <meta name="objecttype" content="book part"> 
  <meta name="otheragent" content="gmat dbtohtml"> 
  <meta name="publisher" content="O'Reilly &amp; Associates, Inc."> 
  <meta name="source" content="SGML"> 
  <meta name="subject" content="Java"> 
  <meta name="title" content="Exploring Java"> 
  <meta http-equiv="Content-Script-Type" content="text/javascript"> 
 </head> 
 <body vlink="#551a8b" alink="#ff0000" text="#000000" bgcolor="#FFFFFF" link="#0000ee"> 
  <div class="htmlnav"> 
   <h1><a href="index.htm"><img src="gifs/smbanner.gif" alt="Exploring Java" border="0"></a></h1> 
   <table width="515" border="0" cellpadding="0" cellspacing="0"> 
    <tbody>
     <tr> 
      <td width="172" align="left" valign="top"><a href="ch01_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border="0"></a></td> 
      <td width="171" align="center" valign="top"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1<br>Yet Another Language?</font></b></td> 
      <td width="172" align="right" valign="top"><a href="ch01_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border="0"></a></td> 
     </tr> 
    </tbody>
   </table> &nbsp; 
   <hr align="left" width="515"> 
  </div> 
  <div class="sect1"> 
   <h2 class="sect1"><a class="TITLE" name="EXJ-CH-1-SECT-3">1.3 <mark>Java</mark> Compared</a></h2> 
   <p class="para"><mark>Java</mark> is a new language, but it draws on many years of programming
experience with other languages in its choice of features. So a lot
can be said in comparing and contrasting <mark>Java</mark> with other
languages. There are at least three pillars necessary to support a
universal language for network programming today: portability, speed,
and security.<a href="ch01_03.htm#EXJ-CH-1-FIG-2">Figure 1.2</a>shows how <mark>Java</mark>
compares to other languages.</p>
   <div class="figure"> 
    <h4 class="figure"><a class="TITLE" name="EXJ-CH-1-FIG-2">Figure 1.2: Programming languages compared</a></h4> 
    <p> <img align="middle" src="./figs/je0102.gif" alt="[Graphic: Figure 1-2]" width="503" height="203" border="0"> </p>
   </div> 
   <p class="para">You may have heard that <mark>Java</mark> is a lot like C or C++, but
that's really not true, except at a superficial level. When you
first look at <mark>Java</mark> code, you'll see that the basic syntax looks
a lot like C or C++. But that's where the similarities end. <mark>Java</mark>
is by no means a direct descendant of C or a next generation C++. If
you compare language features, you'll see that <mark>Java</mark> actually has
more in common with languages like Smalltalk and Lisp. In fact,
<mark>Java</mark>'s implementation is about as far from native C as you can
imagine.</p>
   <p class="para">The surface-level similarities to C and C++ are worth noting,
however.  <mark>Java</mark> borrows heavily from C and C++ syntax, so you'll
see lots of familiar language constructs, including an abundance of
curly braces and semicolons. <mark>Java</mark> also subscribes to the C philosophy
that a good language should be compact; in other words, it should be
sufficiently small and regular so that a programmer can hold all
the language's capabilities in his or her head at once. As C is
extensible with libraries, packages of <mark>Java</mark> classes can be added
to the core language components.</p>
   <p class="para">C has been successful because it provides a reasonably
featureful programming environment, with high performance and an
acceptable degree of portability.  <mark>Java</mark> also tries to balance
functionality, speed, and portability, but it does so in a very
different way. While C trades functionality to get portability,
<mark>Java</mark> trades speed for portability. <mark>Java</mark> also addresses security
issues, while C doesn't.</p>
   <p class="para"><mark>Java</mark> is an interpreted language, so it won't be as
fast as a compiled language like C. But <mark>Java</mark> is fast enough,
especially for interactive, network-based applications, where the
application is often idle, waiting for the user to do something or
waiting for data from the network. For situations where speed is
critical, a <mark>Java</mark> implementation can optimize performance by compiling
byte-code to native machine code on the fly.</p>
   <p class="para"> Scripting languages, like Tcl, Perl, and Wksh, are becoming quite popular, and for good reason. There's no reason a scripting language could not be suitable for safe, networked applications (e.g., Safe Tcl), but most scripting languages are not designed for serious, large-scale programming. The attraction to scripting languages is that they are dynamic; they are powerful tools for rapid prototyping. Some scripting languages, like awk and Perl, also provide powerful tools for text-processing tasks more general-purpose languages find unwieldy. Scripting languages are also highly portable. </p>
   <p class="para"> One problem with scripting languages, however, is that they are rather casual about program structure and data typing. Most scripting languages (with a hesitant exception for Perl 5.0) are not object oriented. They also have vastly simplified type systems and generally don't provide for sophisticated scoping of variables and functions. These characteristics make them unsuitable for building large, modular applications. Speed is another problem with scripting languages; the high-level, fully interpreted nature of these languages often makes them quite slow. </p>
   <p class="para"><mark>Java</mark> offers some of the essential advantages of a scripting
language, along with the added benefits of a lower-level
language.[1] 
 Incremental development with object-oriented components, combined
with <mark>Java</mark>'s simplicity, make it possible to develop applications
rapidly and change them easily, with a short concept to implementation
time. <mark>Java</mark> also comes with a large base of core classes for common
tasks such as building GUIs and doing network
communications. But along with these features, <mark>Java</mark> has the
scalability and software-engineering advantages of more static
languages. It provides a safe structure on which to build higher-level
networked tools and languages.</p>
   <blockquote class="footnote"> 
    <p class="para">[1] 
Don't confuse <mark>Java</mark> with <mark>JavaScript</mark>. <mark>JavaScript</mark> is an
object-based scripting language being developed by
Netscape and is designed to create dynamic, interactive Web
applications. <mark>JavaScript</mark> is a very different language from <mark>Java</mark> in
most respects. For more information on <mark>JavaScript</mark>, check out
Netscape's Web site
(<a href="http://home.netscape.com">http://home.netscape.com</a>). </p>
   </blockquote> 
   <p class="para">As I've already said, <mark>Java</mark> is similar in
design to languages like Smalltalk and Lisp. However, these languages
are used mostly as research vehicles, rather than for developing
large-scale systems. One reason is that they never developed a
standard portable binding to operating-system services analogous to
the C standard library or the <mark>Java</mark> core classes.  Smalltalk is
compiled to an interpreted byte-code format, and it can be dynamically
compiled to native code on the fly, just like <mark>Java</mark>. But <mark>Java</mark> improves
on the design by using a byte-code verifier to ensure the correctness
of <mark>Java</mark> code. This verifier gives <mark>Java</mark> a performance advantage over
Smalltalk because <mark>Java</mark> code requires fewer run-time
checks. <mark>Java</mark>'s byte-code verifier also helps with security
issues, something that Smalltalk doesn't address. Smalltalk is a
mature language though, and <mark>Java</mark>'s designers took lessons from many
of its features.</p>
   <p class="para">Throughout the rest of this chapter, we'll take a
bird's eye view of the <mark>Java</mark> language. I'll explain
what's new and what's not so new about <mark>Java</mark>; how it
differs from other languages, and why.</p>
  </div> 
  <div class="htmlnav"> 
   <p> </p>
   <hr align="left" width="515"> 
   <table width="515" border="0" cellpadding="0" cellspacing="0"> 
    <tbody>
     <tr> 
      <td width="172" align="left" valign="top"><a href="ch01_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border="0"></a></td> 
      <td width="171" align="center" valign="top"><a href="index.htm"><img src="gifs/txthome.gif" border="0" alt="Home"></a></td> 
      <td width="172" align="right" valign="top"><a href="ch01_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border="0"></a></td> 
     </tr> 
     <tr> 
      <td width="172" align="left" valign="top">A Virtual Machine</td> 
      <td width="171" align="center" valign="top"><a href="index/idx_0.htm"><img src="gifs/index.gif" alt="Book Index" border="0"></a></td> 
      <td width="172" align="right" valign="top">Safety of Design</td> 
     </tr> 
    </tbody>
   </table> 
   <hr align="left" width="515"> 
   <img src="gifs/smnavbar.gif" usemap="#map" border="0"> 
   <map name="map"> <area shape="RECT" coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> <area shape="RECT" coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> <area shape="RECT" coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> <area shape="RECT" coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> <area shape="RECT" coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> </map> 
  </div>   
 </body>
</html>